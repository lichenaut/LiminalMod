// automatically generated by the FlatBuffers compiler, do not modify

package com.lichenaut.liminalmod.load.LiminalMod;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Holistic extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static Holistic getRootAsHolistic(ByteBuffer _bb) { return getRootAsHolistic(_bb, new Holistic()); }
  public static Holistic getRootAsHolistic(ByteBuffer _bb, Holistic obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Holistic __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ChunkData chunks(int j) { return chunks(new ChunkData(), j); }
  public ChunkData chunks(ChunkData obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int chunksLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ChunkData.Vector chunksVector() { return chunksVector(new ChunkData.Vector()); }
  public ChunkData.Vector chunksVector(ChunkData.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createHolistic(FlatBufferBuilder builder,
      int chunksOffset) {
    builder.startTable(1);
    Holistic.addChunks(builder, chunksOffset);
    return Holistic.endHolistic(builder);
  }

  public static void startHolistic(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addChunks(FlatBufferBuilder builder, int chunksOffset) { builder.addOffset(0, chunksOffset, 0); }
  public static int createChunksVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startChunksVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endHolistic(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishHolisticBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedHolisticBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Holistic get(int j) { return get(new Holistic(), j); }
    public Holistic get(Holistic obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

